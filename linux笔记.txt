sed -i "s/SELINUX=enforcing/SELINUX=disabled/" /etc/sysconfig/selinux
mount -o loop -t iso9660 /dev/sr0 /mnt
rhel6.7-iso上级目录不可以是中文目录
配置NAT模式  虚拟网络编辑器 里有VMnet8 就用这个，不需要再添加网络
vim显示隐藏字符（但是无法显示所有的隐藏字符）
:set list
echo -e 激活转义字符 -n 不换行输出（去掉行尾的换行符\n）
seq命令 用于产生从某个数到另外一个数之间的所有整数
	seq 1 10  //结果是1 2 3 4 5 6 7 8 9 10 （每行1个数） seq 1 10 | xargs 列转行 
linux 命令太长，如何换行输入？
[dmtsai@study ~]$ cp /var/spool/mail/root /etc/crontab \
> /etc/fstab /root
“\Enter” （\加键盘回车）即可实现
#删除文件中行首的空格
sed -i 's/^[ \t]*//' result.data 
#删除文件中行末空格：
sed -i 's/[ \t]*$//g' result.data
#删除文件中所有的空格：
sed -i s/[ \t]//g result.data
#把文件中空格变为‘，’：
sed -i 's/[ \t]/,/g' result.data


3.7 批量生成空白
---批量生成不同名字的空白文件
for name in {1..10}.txt
do
        touch $name
        echo "已生成空白文件$name"
done

3.13使用head与tail打印文件的前10行
---打印前10行			#head默认打印前10行
head filestat.sh |cat -n
---从stdin(标准输入)读取数据
cat filestat.sh | head
---指定打印前几行
head -n 4 filestat.sh_new
---打印除了最后M行之外所有的行
head -n -M filestat.sh		例：打印除了最后10行之外的所有行 head -n -10 filestat.sh	

---打印文件的最后10行	#tail 默认打印最后10行
tail filestat.sh
---指定打印最后5行
tail -n 5 filestat.sh
---打印除了前M行之外所有的行(也就是从第M+1行开始打印)
tail -n +(M+1) filestat.sh	例：从第6行开始打印	 tail -n +6 filestat.sh
3.16 统计文件的行数，单词数和字符数
---统计行数
wc -l filestat.sh	或者将stdin作为输入  cat filestat.sh | wc -l
---统计单词数
wc -w filestat.sh		或    cat filestat.sh | wc -w
---统计字符数
wc -c filestat.sh		或 	  cat filestat.sh | wc -c
echo -n 1234 |wc -c ===>输出是4		echo 1234 | wc -c ===>输出是5 echo默认添加额外的换行符\n（算一个字符）
---打印文件的行数，单词数和字符数
wc filestat.sh
3.17 打印目录树 （yum install tree -y）
tree /home
---只显示匹配上关键字的文件
tree /home -P *.sh
####################4.让文本飞########################
#######正则表达式，grep,sed进行文本替换，awk进行高级文本处理...###############
文本处理是shell脚本擅长的重要领域之一，它可以于sed,awk,grep,cut这类优美的工具组合在一起来解决文本处理相关的问题
正则表达式是模式匹配技术的核心，借助合适的正则表达式，可以生成我们所需的各类输出结果，如过滤，删除，替换，搜索等

4.21正则表达式
	正则表达式是由字面文本和具有特殊意义的符号组成的。
---示例：匹配给定文本中的所有单词
( ?[a-zA-Z]+ ? )
---示例：匹配一个IP地址
[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}
---正则表达式的基本组成部分
^ 行起始标记	$ 行尾标记  	. 匹配任意一个字符	[] (在单引号中不用转义)匹配包含在[字符]之中的任意一个字符,如coo[kl]匹配cook或cool
? 匹配之前的项1次或0次	+ 匹配之前的项1次或多次	* 匹配之前的项0次或多次	() 创建一个用于匹配的子串
{n} 匹配之前的项n次 例如：[0-9]{3}匹配任意一个三位数，[0-9]{3}可以扩展为[0-9][0-9][0-9]
{n,} 之前的项至少需要匹配n次	例如：[0-9]{2,} 匹配任意一个两位或更多位的数字
{n,m} 指定之前的项所必须匹配的最小次数和最大次数 例如：[0-9]{2,5} 匹配从两位数到五位数之间的任意一个数字
 | 交替-匹配|两边的任意一项 例如：Oct (1st | 2nd) 匹配Oct 1st或Oct 2nd
 \ 转义符可以将上面介绍的特殊字符进行转义	例如：a\.b匹配a.b 但不能匹配ajb。通过在.之间加上前缀\ 从而忽略了.的特殊意义
 
4.3 用grep在文件中搜索文本
---单个grep命令对多个文件进行搜索 -i 忽略字符的大小写
grep -i "word" file1 file2 file3 ...
---用--color选项可以在输出行中着重标记出匹配到的单词
grep word filename --color=auto
---grep命令只解释word中的某些特殊字符。如果要使用正则表达式，需要添加-E选项，这意味着使用扩展(extenged)正则表达式.
echo "this is a line." > ws.txt
---grep命令选项-o 只输出文件中匹配到的文本部分
grep -E -o "[a-z]" ws.txt  相当于grep -E -o "[a-z]?" ws.txt	 grep -E -o "[a-z]*" ws.txt 相当于grep -E -o "[a-z]+" ws.txt
t															 this
h															 is
i															 a
s															 line
i
s
a
l
i
n
e
[root@ws ws]# grep -o -E "[a-z]+\." ws.txt 
line.
---打印包含word行之外的所有行，使用-v选项（将匹配结果进行反转）
grep -v line ws.txt
---统计文件或文本中包含匹配字符串的行数 使用-c选项(统计匹配到的行的数量，并不是匹配的次数)
grep -c "line" ws.txt
---grep的静默输出
有时候，我们并不打算查看匹配的字符串，而只是想知道是否能够成功匹配。这可以通过设置grep的静默选项（-q）来实现。在静默模式中，grep命令不会输出任何内容。它仅是运行命
令，然后根据命令执行成功与否返回退出状态。如果命令运行成功会返回0，如果失败则返回非0值。
########编写脚本，利用grep的静默模式来测试文本匹配是否存在于某个文件中
#!/bin/bash
# 文件名: silent_grep.sh
# 用途: 测试文件是否包含特定的文本内容
if [ $# -ne 2 ]; then								//如果传递给脚本的参数个数等于2
echo "Usage: $0 match_text filename"
exit 1												//在调用环境echo $? 就返回1，出错定义为1，或者其他数字
fi
match_text=$1										//match_text=第一个参数值
filename=$2											//filename=第二个参数
grep -q "$match_text" $filename
if [ $? -eq 0 ]; then								//如果上一个命令成功执行，即$? = 0
echo "$1 exists in the file"
else
echo "$1 does not exist in the file"
fi
注意：$# 传递给脚本或函数的参数个数 $? 上个命令的退出状态（退出状态是一个数字），命令执行成功返回0，失败返回1
	  $1 传递给脚本或函数的第一个参数 $2 第二个参数
./silent_grep.sh line ws.txt 
---打印出匹配文本之前或之后的行
seq 1 10 | grep 6 -A 3			#打印匹配某个结果之后的3行，使用-A选项	
seq 1 10 | grep 6 -B 3			#打印匹配某个结果之前的3行，使用-B选项
seq 1 10 | grep 6 -C 3			#打印匹配某个结果之前以及之后的3行，使用-C选项

4.4 用cut按列切分文件
我们可能需要按列，而不是按行来切分文件。cut是一个帮我们将文本按列进行切分的小巧工具。它也可以指定分隔每列的定界符。在cut
的术语中，每列被称为一个字段。
(1) 要提取特定的字段或列，可以使用下面的语法：
cut -f2,3 filename		#这条命令将显示第2列和第3列。
[root@ws ws]# cat student_data.txt 
No	Name	Mark	Percent
1	Sarath	45	90
2	Alex	49	98
3	Anu	45	90
[root@ws ws]# cut -s -f1,3 student_data.txt 
No	Mark
1	45
2	49
3	45
(2) 我们也可以用 --complement选项对提取的字段进行补集运算。假设有多个字段，你希望打印出除第3列之外的所有列，则可以使用：
[root@ws ws]# cut -f3 --complement student_data.txt 
No	Name	Percent
1	Sarath	90
2	Alex	98
3	Anu	90
(3) 要指定字段的定界符，使用 -d选项：
---指定字段的字符或字节范围
假设我们不依赖定界符，但需要通过将字段定义为一个字符范围（行首记为0）来进行字段提取。这种需求也可以用cut来实现。
选项 -b表示字节  -c表示字符  -f用于定义字段
cat range_fields.txt
abcdefghijklmnopqrstuvwxyz
abcdefghijklmnopqrstuvwxyz
abcdefghijklmnopqrstuvwxyz
abcdefghijklmnopqrstuvwxy
你可以打印第1个到第5个字符：
cut -c1-5 range_fields.txt
abcde
abcde
abcde
abcde
打印前2个字符：
cut range_fields.txt -c -2
ab
ab
ab
ab
在使用 -c、-f和 -b时，我们可以指定输出定界符：--output-delimiter "delimiter string"
当用-b或-c提取多个字段时，必须使用 --output-delimiter，否则，你就没法区分不同的字段了
cut range_fields.txt -c1-3,6-9 --output-delimiter ","
abc,fghi
abc,fghi
abc,fghi
abc,fghi

4.5 使用sed进行文本替换
sed是流编辑器（stream editor）的缩写。它是文本处理中不可或缺的工具，能够配合正则表达式使用，功能不同凡响。sed命令众所周知的一个用法是进行文本替换。这则攻略包括了sed
命令大部分的常用技术。
(1) sed可以替换给定文本中的字符串。
sed 's/pattern/replace_string/' file
(2) 在默认情况下，sed只会打印替换后的文本。如果需要在替换的同时保存更改，可以使用-i选项，可以将替换结果应用于原文件。很多用户在进行替换之后，会借助重
定向来保存文件：
sed -i 's/text/replace/g' file 
后缀/g意味着sed会替换每一处匹配。但是有时候我们只需要从第n处匹配开始替换。对此，可以使用/Ng选项。
[root@ws ws]# echo thisthisthisthis | sed 's/this/THIS/2g'
thisTHISTHISTHIS
字符/在sed中被作为定界符使用。我们可以像下面一样使用任意的定界符：
sed 's:text:replace:g'
sed 's|text|replace|g'
当定界符出现在样式内部时，我们必须用前缀\对它进行转义：
sed 's|te\|xt|replace|g'
\|是一个出现在样式内部并经过转义的定界符。
4.5.2 补充内容
sed命令包含大量可用于文本处理的选项。将这些选项以合理的次序组合，可以只用一行命令就解决很多复杂的问题。让我们看看这些选项。
1) 移除空白行  ^$表示空白行  （空白行就是这一行没有内容都是空白！）
sed '/^$/d' file

[root@ws ws]# cat sed_data.txt 
11 abc 111 this 9 file contains 111 11 88 numbers 0000
[root@ws ws]# sed 's/\b[0-9]\{3\}\b/NUMBER/g' sed_data.txt		#单引号中{}没有任何含义，因此需要转义字符\使其能作为正则表达式使用
11 abc NUMBER this 9 file contains NUMBER 11 88 numbers 0000
注意：[0-9]表示数位取值范围，也就是说从0~9。{3}表示匹配之前的字符3次。\{3\}中的\用于转义{和}。\b表示单词边界。
5) 组合多个表达式
echo abc | sed 's/a/A/' | sed 's/c/C/'
AbC
echo abc | sed 's/a/A/;s/c/C/'
AbC
echo abc | sed -e 's/a/A/' -e 's/c/C/'
AbC
6) 引用
sed表达式通常用单引号来引用。不过也可以使用双引号。双引号会通过对表达式求值来对其进行扩展。当我们想在sed表达式中使用一些变量时，双引号就能派上用场了。
[root@ws ws]# text=hello
[root@ws ws]# echo hello world | sed "s/$text/HELLO/"
HELLO world

4.6 使用awk进行高级文本处理
awk是一款设计用于数据流的工具。它颇有玩头的原因就在于可以对列和行进行操作。awk有很多内建的功能，比如数组、函数等，这是它和C语言的相同之处。灵活性是awk最大的
优势。
4.6.1 预备知识
awk脚本的结构基本如下所示：
awk ' BEGIN{ print "start" } pattern { commands } END{ print "end" }' file
awk命令也可以从stdin中读取
awk脚本通常由3部分组成。BEGIN，END和带模式匹配选项的常见语句块。这3个部分都是可选项，在脚本中可省略任意部分。
4.6.2 实战演练
以下awk脚本被包含在单引号或双引号之间：
awk 'BEGIN { statements } { statements } END { end statements }'
也可以使用：
awk "BEGIN { statements } { statements } END { end statements }"
例如：
awk 'BEGIN { i=0 } { i++ } END{ print i}' filename
或者
awk "BEGIN { i=0 } { i++ } END{ print i }" filename
4.6.3 工作原理
awk命令的工作方式如下所注。
(1) 执行BEGIN { commands } 语句块中的语句。{ ... }中命令与命令之间用;隔开 { }外则不用
(2) 从文件或stdin中读取一行，然后执行pattern { commands }。重复这个过程，直到文件全部被读取完毕。
(3) 当读至输入流末尾时，执行END { commands } 语句块。
BEGIN语句块在awk开始从输入流中读取行之前被执行。这是一个可选的语句块，诸如变量初始化、打印输出表格的表头等语句通常都可以写入BEGIN语句块中。
END语句块和BEGIN语句块类似。END语句块在awk从输入流中读取完所有的行之后即被执行。像打印所有行的分析结果这类汇总信息，都是在END语句块中实现的常见任务（例如，在比
较过所有的行之后，打印出最大数）。它也是一个可选的语句块。
最重要的部分就是pattern语句块中的通用命令。这个语句块同样是可选的。如果不提供该语句块，则默认执行{ print }，即打印所读取到的每一行。awk对于每一行，都会执行这个语
句块。这就像一个用来读取行的while循环，在循环体中提供了相应的语句。
每读取一行，awk就会检查该行和提供的样式是否匹配。样式本身可以是正则表达式、条件语句以及行匹配范围等。如果当前行匹配该样式，则执行{ }中的语句。
样式是可选的。如果没有提供样式，那么awk就认为所有的行都是匹配的，并执行{ }中的语句。
[root@ws ws]# echo -e "line1\nline2" | awk 'BEGIN{ print "Start" } { print } END{ print"End" }'
Start
line1
line2
End
当使用不带参数的print时，它会打印出当前行。关于print，需要记住两件重要的事情：当print的参数是以逗号进行分隔时，参数打印时则以空格作为定界符。在awk的print语句中，
双引号是被当做拼接操作符（concatenation operator）使用的。
echo | awk '{ var1="v1"; var2="v2"; var3="v3"; \
print var1,var2,var3 ; }'
该语句将按照下面的格式打印变量值：
v1 v2 v3
4.6.4 补充内容
awk命令具有丰富的特性。要想洞悉awk编程的精妙之处，首先应该熟悉awk重要的选项和功能。让我们来看看awk的一些重要功能。
1.特殊变量
NR：表示记录数量，在执行过程中对应于当前行号。		awk '{ print NR }' /etc/passwd  表示该文件一共有多少行
NF：表示字段数量，在执行过程中对应于当前行的字段数。awk -F: '{ print NF }' /etc/passwd 表示每行有几个字段数，字段与字段之间的分隔符为：
$0：这个变量包含执行过程中当前行的文本内容。
$1：这个变量包含第一个字段的文本内容。
$2：这个变量包含第二个字段的文本内容。
[root@ws ws]# echo -e "line1 f2 f3\nline2 f4 f5\nline3 f6 f7" | awk '{
print "Line no:"NR",No of fields:"NF"", "$0="$0, "$1="$1,"$2="$2,"$3="$3
}'
Line no:1,No of fields:3 $0=line1 f2 f3 $1=line1 $2=f2 $3=f3
Line no:2,No of fields:3 $0=line2 f4 f5 $1=line2 $2=f4 $3=f5
Line no:3,No of fields:3 $0=line3 f6 f7 $1=line3 $2=f6 $3=f7
我们可以用print $NF打印一行中最后一个字段，用 $(NF-1)打印倒数第二个字段，其他字段依次类推即可。
---打印每一行的第2和第3个字段：
[root@ws ws]# echo -e "line1 f2 f3\nline2 f4 f5\nline3 f6 f7" | awk \
> '{ print $2,$3 }'
f2 f3
f4 f5
f6 f7
---统计文件中的行数
[root@ws ws]# echo -e "line1 f2 f3\nline2 f4 f5\nline3 f6 f7" | awk 'END { print NR }'
3
这里只使用了END语句块。每读入一行，awk会将NR更新为对应的行号。当到达最后一行时，NR中的值就是最后一行的行号，于是，位于END语句块中的NR就包含了文件的行数。
---统计文件中的列数
[root@ws ws]# echo -e "line1 f2 f3\nline2 f4 f5\nline3 f6 f7" | awk 'END { print NF }'
3
[root@ws ws]# seq 5 | awk 'BEGIN{ sum=0 ; print "Start"} { print ; sum+=$1 } END { print "==" ; print sum}'
Start
1
2
3
4
5
==
15
2.将外部变量值传递给awk
借助选项 -v，我们可以将外部值（并非来自stdin）传递给awk：
[root@ws ws]# a=12
[root@ws ws]# b=13
[root@ws ws]# echo | awk '{ print s1,s2 }' s1=$a s2=$b
12 13
---当输入来自于文件而非标准输入时，使用下列命令：
awk '{ print v1,v2 }' v1=$var1 v2=$var2 filename
在上面的方法中，变量之间用空格分隔，以键-值对的形式（v1=$var1 v2=$var2）作为awk的命名行参数紧随在BEGIN、{}和END语句块之后。
3.用getline读取行
[root@ws ws]# seq 5 | awk 'BEGIN { getline; print "Read ahead first line", $0 } { print $0 }'
Read ahead first line 1
2
3
4
5
4. 使用过滤模式对awk处理的行进行过滤
我们可以为需要处理的行指定一些条件，例如：
awk 'NR < 5' # 行号小于5的行
awk 'NR==1,NR==4' # 行号在1到5之间的行
awk '/linux/' # 包含样式linux的行（可以用正则表达式来指定模式）
awk '!/linux/' # 不包含包含模式为linux的行
例如:cat ws.txt | awk '!/word/'  ###含有单词word的行不显示输出
5.设置字段定界符
默认的字段定界符是空格。我们也可以用 -F "delimiter"明确指定一个定界符：
awk -F: '{ print $NF }' /etc/passwd
6. 从awk中读取命令输出
在下面的代码中，echo会生成一个空白行。变量cmdout包含命令grep root /etc/passwd
的输出，该命令会打印出包含root的行。
将命令的输出结果读入变量output的语法如下：
"command" | getline output ;
例如：
$ echo | awk '{ "grep root /etc/passwd" | getline cmdout ; print cmdout }'
root:x:0:0:root:/root:/bin/bash
通过使用getline，我们将外部shell命令的输出读入变量cmdout。
7. 在awk中使用循环
在awk中可以使用for循环，其格式如下：
for(i=0;i<10;i++) { print $i ; }

4.9 按列合并多个文件	paste命令,默认的定界符是制表符，也可以用-d明确指定定界符
[root@ws ws]# seq 1 5 > file1.txt
[root@ws ws]# cat file2.txt 
slynux
gnu
bash
hack
[root@ws ws]# paste file1.txt file2.txt -d ","
1,slynux
2,gnu
3,bash
4,hack
5,
4.10 打印文件或行中的第n 个单词或列
我们可能有一个包含了多列数据的文件，不过只有其中的一小部分能派上用场。例如在以成
绩排序的学生列表中，我们希望得到成绩最高的四名学生。来看看如何实现。
(1) 用下面的命令打印第5列：
awk '{ print $5 }' filename  		或者 cut -f5 filename
如果要打印当前目录下各文件的权限和文件名，可以使用下列命令：
ls -l | awk '{ print $1 " : " $9 }'
4.11 打印行或样式之间的文本
我们有时候可能需要根据某些条件打印文本的某一部分，比如由行号或起止样式所匹配的文本范围。让我们来看看如何实现这些需求。
4.11.1 预备知识
我们可以用awk、grep和sed这类工具来根据条件打印某些文本区域。不过，我仍然觉得awk是最简单明了的方法。下面就看看如何使用awk完成这项任务。
4.11.2 实战演练
(1) 要打印出从M行到N行这个范围内的所有文本，使用下面的语法
awk 'NR==M, NR==N' filename
也可以用stdin作为输入：
cat filename | awk 'NR==M, NR==N'
例如：seq 100 | awk 'NR==4,NR==6'
(3) 要打印处于start_pattern与end_pattern之间的文本(之间完整行都打印出来)，使用下面的语法：
awk '/start_pattern/, /end _pattern/' filename
例如：
$ cat section.txt
line with pattern1
line with pattern2
line with pattern3
line end with pattern4
line with pattern5
$ awk '/pa.*3/, /end/' section.txt				#用于awk中的样式可以是正则表达式，也可以是字符串
line with pattern3
line end with pattern4
4.14 在文件中移除包含某个单词的句子
只要能写出正确的正则表达式，移除包含某个单词的句子简直就是手到擒来.
sed是进行文本替换的不二之选。这样，我们就可以通过sed用空白替代匹配的句子。
cat sentence.txt
Linux refers to the family of Unix-like computer operating systems that use the Linux
kernel. Linux can be installed on a wide variety of computer hardware, ranging from
mobile phones, tablet computers and video game consoles, to mainframes and supercomputers.
Linux is predominantly known for its use in servers.
sed 's/ [^.]*mobile phones[^.]*\.//g' sentence.txt


8.当个好管家

###################9.管理重任#############
9.2 收集进程信息
进程是程序的运行实例（running instance）。运行在一台计算机中的多个进程都被分配了一个称为进程ID（PID）的唯一标识数字。同一个程序的多个实例可以同时运行，但是它们的PID却
互不相同。进程包括多种属性，例如拥有该进程的用户、进程使用的内存数量、进程占用的CPU时间等。这则攻略将学习如何收集有关进程的信息。
9.5 采集系统信息
从命令行中收集当前系统信息对于记录系统数据来说非常重要。各种系统信息包括主机名、内核版本、Linux发布版名称、CPU信息、内存信息、磁盘分区信息等。这则攻略将为你演示在
Linux中采集系统信息的各种途径。
(1) 打印当前系统的主机名：
$ hostname
或者
$ uname -n
(2) 打印Linux内核版本、硬件架构等详细信息：
$ uname -a
(3) 打印内核发行版本：
$ uname -r
(4) 打印主机类型：
$ uname -m
(5) 打印CPU相关信息：
$ cat /proc/cpuinfo
获取处理器名称：
$ cat /proc/cpuinfo | sed -n 5p

9.7 用cron 进行调度
我们经常会需要安排脚本在某个时间或每隔一段时间来运行。GNU/Linux系统包含了各种可用于任务调度的工具。cron就是其中之一，它通过守护进程cron使得任务能够按照固定的时间
间隔在系统后台自动运行。cron利用的是一个叫做cron表的文件，这个文件中存储了需要执行的脚本或命令的调度列表以及执行时间。一个常见的用法是设置在免费时段（一些ISP提供免费
使用时间，通常是在午夜），从Internet上进行下载。用户完全不需要在夜里熬红双眼等待下载。只需要编写一个cron条目，然后调度下载即可。你也可以安排当免费时段结束后自动断开Internet
连接并关机
(1) 创建一项cron作业，在每天中每小时的第2分钟执行脚本test.sh：
02 * * * * /home/slynux/test.sh
(2) 在每天的第5、6、7小时执行脚本：
00 5,6,7 * * /home/slynux/test.sh
(3) 在周日的每个小时执行脚本script.sh：
00 */12 * * 0 /home/slynux/script.sh
(4) 在每天凌晨2点关闭计算机：
00 02 * * * /sbin/shutdown -h
(5) 现在，让我们看看如何调度一项cron作业。利用crontab命令进行调度的方法有很
多种。
使用选项 -e来编辑cron表：
$ crontab -e
02 02 * * * /home/slynux/script.sh
输入crontab -e后，会打开默认的文本编辑器（通常是vi）供用户输入cron作业
并保存。该cron作业将会在指定的时间被调度执行。
9.7.3 工作原理
cron表中的每一个条目都由6部分组成，并按照下列顺序排列：* * * * *
 分钟（0～59）
 小时（0～23）
 天（1～31）
 月份（1～12）
 工作日（0～6）
 命令（在指定时间执行的脚本或命令）
星号（*）指定命令应该在每个时间段执行。也就是说，如果*是写在cron作业中的小时字段中，那么命令就会每小时执行一次。与此类似，如果你希望在某个特定时段执行命令，那么就
在对应的时间字段中指定时段，并用逗号分隔（例如要在5分钟和10分钟时运行命令，那就在分钟字段中输入"5,10"）。还有另一个不错的选项可以让我们以特定的时间间隔运行命令。在分钟
字段使用*/5，可以每5分钟运行一次命令。这个技巧可以用在任何时间字段。一个cron表条目是由一项或多项cron作业组成的。cron表条目中的每一行都是一项作业。
执行cron作业所使用的权限同执行crontab命令所使用的权限相同。如果你需要执行要求更高权限的命令，例如关闭计算机，那么就要以root用户身份执行crontab。
在cron作业中指定的命令需要使用完整路径。这是因为执行cron作业时的环境与终端所使用的环境不同，环境变量PATH可能都没有设置。如果命令运行时需要设置某些环境变量，就应
该明确地进行设定。

3. 查看cron表
我们可以用选项-l列出cron表中现有的内容：
$ crontab -l


创建RAID5 
部署RAID5磁盘阵列时，至少需要用到3块硬盘，还需要再加一块备份硬盘，所以总计需要在虚拟机中模拟4快硬盘设备
[root@ws ~]# mdadm -Cv /dev/md0 -n 3 -l 5 -x 1 /dev/sdb /dev/sdc /dev/sdd /dev/sde 
mdadm: layout defaults to left-symmetric
mdadm: layout defaults to left-symmetric
mdadm: chunk size defaults to 512K
mdadm: size set to 20954624K
mdadm: Defaulting to version 1.2 metadata
mdadm: array /dev/md0 started.
参数 -n 3代表创建这个RAID磁盘阵列所需的硬盘数，参数 -l 5代表RAID的级别，二参数-x 1代表有一块备份盘(可通过-D 查看备份盘)
参数 -f 模拟设备损坏 -r 移除设备
[root@ws ~]# mdadm -D /dev/md0		//查看详细信息
[root@ws ~]# mkfs.ext4 /dev/md0 	//格式化
[root@ws ~]# echo "/dev/md0 /RAID ext4 defaults 0 0" >> /etc/fstab
[root@ws ~]# mkdir /RAID
[root@ws ~]# mount -a
lsblk 查看sdb,sdc,sdd,sde挂在md127 fstab 中改为/dev/md127
[root@ws ~]# lsblk
NAME    MAJ:MIN RM  SIZE RO TYPE  MOUNTPOINT
sda       8:0    0   50G  0 disk  
├─sda1    8:1    0   23G  0 part  /boot
├─sda2    8:2    0    4G  0 part  [SWAP]
└─sda3    8:3    0   23G  0 part  /
sdb       8:16   0   20G  0 disk  
└─md127   9:127  0   40G  0 raid5 
sdc       8:32   0   20G  0 disk  
└─md127   9:127  0   40G  0 raid5 
sdd       8:48   0   20G  0 disk  
└─md127   9:127  0   40G  0 raid5 
sde       8:64   0   20G  0 disk  
└─md127   9:127  0   40G  0 raid5 
sr0      11:0    1  3.6G  0 rom   /mnt
[root@ws ~]# vim /etc/fstab 
[root@ws ~]# mount -a
---我们把硬盘设备/dev/sdb移除磁盘阵列（模拟损坏），然后迅速查看/dev/md127磁盘阵列的状态，会发现备份盘已经自动顶替上去并开始了数据同步
[root@ws ~]# mdadm /dev/md127 -f /dev/sdb
[root@ws ~]# mdadm -D /dev/md127
    Number   Major   Minor   RaidDevice State
       3       8       64        0      spare rebuilding   /dev/sde
       1       8       32        1      active sync   /dev/sdc
       4       8       48        2      active sync   /dev/sdd

       0       8       16        -      faulty   /dev/sdb
删除整个RAID：
[root@ws ~]# mdadm /dev/md127 --fail /dev/sde --remove /dev/sde
[root@ws ~]# mdadm --stop /dev/md127 

